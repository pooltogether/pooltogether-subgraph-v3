// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Comptroller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Comptroller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Comptroller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Comptroller", id.toString(), this);
  }

  static load(id: string): Comptroller | null {
    return store.get("Comptroller", id) as Comptroller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get players(): Array<string> {
    let value = this.get("players");
    return value.toStringArray();
  }

  set players(value: Array<string>) {
    this.set("players", Value.fromStringArray(value));
  }

  get balanceDrips(): Array<string> {
    let value = this.get("balanceDrips");
    return value.toStringArray();
  }

  set balanceDrips(value: Array<string>) {
    this.set("balanceDrips", Value.fromStringArray(value));
  }

  get volumeDrips(): Array<string> {
    let value = this.get("volumeDrips");
    return value.toStringArray();
  }

  set volumeDrips(value: Array<string>) {
    this.set("volumeDrips", Value.fromStringArray(value));
  }
}

export class PrizePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrizePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizePool", id.toString(), this);
  }

  static load(id: string): PrizePool | null {
    return store.get("PrizePool", id) as PrizePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deactivated(): boolean {
    let value = this.get("deactivated");
    return value.toBoolean();
  }

  set deactivated(value: boolean) {
    this.set("deactivated", Value.fromBoolean(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get reserveRegistry(): Bytes | null {
    let value = this.get("reserveRegistry");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reserveRegistry(value: Bytes | null) {
    if (value === null) {
      this.unset("reserveRegistry");
    } else {
      this.set("reserveRegistry", Value.fromBytes(value as Bytes));
    }
  }

  get trustedForwarder(): Bytes | null {
    let value = this.get("trustedForwarder");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trustedForwarder(value: Bytes | null) {
    if (value === null) {
      this.unset("trustedForwarder");
    } else {
      this.set("trustedForwarder", Value.fromBytes(value as Bytes));
    }
  }

  get prizeStrategy(): string | null {
    let value = this.get("prizeStrategy");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prizeStrategy(value: string | null) {
    if (value === null) {
      this.unset("prizeStrategy");
    } else {
      this.set("prizeStrategy", Value.fromString(value as string));
    }
  }

  get prizePoolType(): string | null {
    let value = this.get("prizePoolType");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prizePoolType(value: string | null) {
    if (value === null) {
      this.unset("prizePoolType");
    } else {
      this.set("prizePoolType", Value.fromString(value as string));
    }
  }

  get compoundPrizePool(): string | null {
    let value = this.get("compoundPrizePool");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set compoundPrizePool(value: string | null) {
    if (value === null) {
      this.unset("compoundPrizePool");
    } else {
      this.set("compoundPrizePool", Value.fromString(value as string));
    }
  }

  get reserveFeeControlledToken(): Bytes {
    let value = this.get("reserveFeeControlledToken");
    return value.toBytes();
  }

  set reserveFeeControlledToken(value: Bytes) {
    this.set("reserveFeeControlledToken", Value.fromBytes(value));
  }

  get underlyingCollateralToken(): Bytes {
    let value = this.get("underlyingCollateralToken");
    return value.toBytes();
  }

  set underlyingCollateralToken(value: Bytes) {
    this.set("underlyingCollateralToken", Value.fromBytes(value));
  }

  get underlyingCollateralDecimals(): BigInt {
    let value = this.get("underlyingCollateralDecimals");
    return value.toBigInt();
  }

  set underlyingCollateralDecimals(value: BigInt) {
    this.set("underlyingCollateralDecimals", Value.fromBigInt(value));
  }

  get underlyingCollateralName(): string {
    let value = this.get("underlyingCollateralName");
    return value.toString();
  }

  set underlyingCollateralName(value: string) {
    this.set("underlyingCollateralName", Value.fromString(value));
  }

  get underlyingCollateralSymbol(): string {
    let value = this.get("underlyingCollateralSymbol");
    return value.toString();
  }

  set underlyingCollateralSymbol(value: string) {
    this.set("underlyingCollateralSymbol", Value.fromString(value));
  }

  get maxExitFeeMantissa(): BigInt {
    let value = this.get("maxExitFeeMantissa");
    return value.toBigInt();
  }

  set maxExitFeeMantissa(value: BigInt) {
    this.set("maxExitFeeMantissa", Value.fromBigInt(value));
  }

  get maxTimelockDuration(): BigInt {
    let value = this.get("maxTimelockDuration");
    return value.toBigInt();
  }

  set maxTimelockDuration(value: BigInt) {
    this.set("maxTimelockDuration", Value.fromBigInt(value));
  }

  get timelockTotalSupply(): BigInt {
    let value = this.get("timelockTotalSupply");
    return value.toBigInt();
  }

  set timelockTotalSupply(value: BigInt) {
    this.set("timelockTotalSupply", Value.fromBigInt(value));
  }

  get liquidityCap(): BigInt {
    let value = this.get("liquidityCap");
    return value.toBigInt();
  }

  set liquidityCap(value: BigInt) {
    this.set("liquidityCap", Value.fromBigInt(value));
  }

  get playerCount(): BigInt {
    let value = this.get("playerCount");
    return value.toBigInt();
  }

  set playerCount(value: BigInt) {
    this.set("playerCount", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalSponsorship(): BigInt {
    let value = this.get("totalSponsorship");
    return value.toBigInt();
  }

  set totalSponsorship(value: BigInt) {
    this.set("totalSponsorship", Value.fromBigInt(value));
  }

  get cumulativePrizeGross(): BigInt {
    let value = this.get("cumulativePrizeGross");
    return value.toBigInt();
  }

  set cumulativePrizeGross(value: BigInt) {
    this.set("cumulativePrizeGross", Value.fromBigInt(value));
  }

  get cumulativePrizeReserveFee(): BigInt {
    let value = this.get("cumulativePrizeReserveFee");
    return value.toBigInt();
  }

  set cumulativePrizeReserveFee(value: BigInt) {
    this.set("cumulativePrizeReserveFee", Value.fromBigInt(value));
  }

  get cumulativePrizeNet(): BigInt {
    let value = this.get("cumulativePrizeNet");
    return value.toBigInt();
  }

  set cumulativePrizeNet(value: BigInt) {
    this.set("cumulativePrizeNet", Value.fromBigInt(value));
  }

  get currentPrizeId(): BigInt {
    let value = this.get("currentPrizeId");
    return value.toBigInt();
  }

  set currentPrizeId(value: BigInt) {
    this.set("currentPrizeId", Value.fromBigInt(value));
  }

  get currentState(): string {
    let value = this.get("currentState");
    return value.toString();
  }

  set currentState(value: string) {
    this.set("currentState", Value.fromString(value));
  }

  get prizesCount(): BigInt {
    let value = this.get("prizesCount");
    return value.toBigInt();
  }

  set prizesCount(value: BigInt) {
    this.set("prizesCount", Value.fromBigInt(value));
  }

  get prizes(): Array<string> {
    let value = this.get("prizes");
    return value.toStringArray();
  }

  set prizes(value: Array<string>) {
    this.set("prizes", Value.fromStringArray(value));
  }

  get tokenCreditRates(): Array<string> {
    let value = this.get("tokenCreditRates");
    return value.toStringArray();
  }

  set tokenCreditRates(value: Array<string>) {
    this.set("tokenCreditRates", Value.fromStringArray(value));
  }

  get tokenCreditBalances(): Array<string> {
    let value = this.get("tokenCreditBalances");
    return value.toStringArray();
  }

  set tokenCreditBalances(value: Array<string>) {
    this.set("tokenCreditBalances", Value.fromStringArray(value));
  }

  get players(): Array<string> {
    let value = this.get("players");
    return value.toStringArray();
  }

  set players(value: Array<string>) {
    this.set("players", Value.fromStringArray(value));
  }

  get sponsors(): Array<string> {
    let value = this.get("sponsors");
    return value.toStringArray();
  }

  set sponsors(value: Array<string>) {
    this.set("sponsors", Value.fromStringArray(value));
  }
}

export class CompoundPrizePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CompoundPrizePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CompoundPrizePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CompoundPrizePool", id.toString(), this);
  }

  static load(id: string): CompoundPrizePool | null {
    return store.get("CompoundPrizePool", id) as CompoundPrizePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cToken(): Bytes | null {
    let value = this.get("cToken");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cToken(value: Bytes | null) {
    if (value === null) {
      this.unset("cToken");
    } else {
      this.set("cToken", Value.fromBytes(value as Bytes));
    }
  }
}

export class PrizeStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PrizeStrategy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PrizeStrategy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PrizeStrategy", id.toString(), this);
  }

  static load(id: string): PrizeStrategy | null {
    return store.get("PrizeStrategy", id) as PrizeStrategy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get periodicPrizeStrategy(): string | null {
    let value = this.get("periodicPrizeStrategy");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set periodicPrizeStrategy(value: string | null) {
    if (value === null) {
      this.unset("periodicPrizeStrategy");
    } else {
      this.set("periodicPrizeStrategy", Value.fromString(value as string));
    }
  }
}

export class PeriodicPrizeStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save PeriodicPrizeStrategy entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PeriodicPrizeStrategy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PeriodicPrizeStrategy", id.toString(), this);
  }

  static load(id: string): PeriodicPrizeStrategy | null {
    return store.get(
      "PeriodicPrizeStrategy",
      id
    ) as PeriodicPrizeStrategy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get numberOfWinners(): BigInt | null {
    let value = this.get("numberOfWinners");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfWinners(value: BigInt | null) {
    if (value === null) {
      this.unset("numberOfWinners");
    } else {
      this.set("numberOfWinners", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenListener(): string | null {
    let value = this.get("tokenListener");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenListener(value: string | null) {
    if (value === null) {
      this.unset("tokenListener");
    } else {
      this.set("tokenListener", Value.fromString(value as string));
    }
  }

  get prizePool(): string | null {
    let value = this.get("prizePool");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prizePool(value: string | null) {
    if (value === null) {
      this.unset("prizePool");
    } else {
      this.set("prizePool", Value.fromString(value as string));
    }
  }

  get rng(): Bytes | null {
    let value = this.get("rng");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set rng(value: Bytes | null) {
    if (value === null) {
      this.unset("rng");
    } else {
      this.set("rng", Value.fromBytes(value as Bytes));
    }
  }

  get ticket(): string | null {
    let value = this.get("ticket");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ticket(value: string | null) {
    if (value === null) {
      this.unset("ticket");
    } else {
      this.set("ticket", Value.fromString(value as string));
    }
  }

  get sponsorship(): string | null {
    let value = this.get("sponsorship");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sponsorship(value: string | null) {
    if (value === null) {
      this.unset("sponsorship");
    } else {
      this.set("sponsorship", Value.fromString(value as string));
    }
  }

  get prizePeriodSeconds(): BigInt {
    let value = this.get("prizePeriodSeconds");
    return value.toBigInt();
  }

  set prizePeriodSeconds(value: BigInt) {
    this.set("prizePeriodSeconds", Value.fromBigInt(value));
  }

  get prizePeriodStartedAt(): BigInt {
    let value = this.get("prizePeriodStartedAt");
    return value.toBigInt();
  }

  set prizePeriodStartedAt(value: BigInt) {
    this.set("prizePeriodStartedAt", Value.fromBigInt(value));
  }

  get prizePeriodEndAt(): BigInt {
    let value = this.get("prizePeriodEndAt");
    return value.toBigInt();
  }

  set prizePeriodEndAt(value: BigInt) {
    this.set("prizePeriodEndAt", Value.fromBigInt(value));
  }

  get externalErc20Awards(): Array<string> {
    let value = this.get("externalErc20Awards");
    return value.toStringArray();
  }

  set externalErc20Awards(value: Array<string>) {
    this.set("externalErc20Awards", Value.fromStringArray(value));
  }

  get externalErc721Awards(): Array<string> {
    let value = this.get("externalErc721Awards");
    return value.toStringArray();
  }

  set externalErc721Awards(value: Array<string>) {
    this.set("externalErc721Awards", Value.fromStringArray(value));
  }
}

export class Prize extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Prize entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Prize entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Prize", id.toString(), this);
  }

  static load(id: string): Prize | null {
    return store.get("Prize", id) as Prize | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get awardStartOperator(): Bytes | null {
    let value = this.get("awardStartOperator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set awardStartOperator(value: Bytes | null) {
    if (value === null) {
      this.unset("awardStartOperator");
    } else {
      this.set("awardStartOperator", Value.fromBytes(value as Bytes));
    }
  }

  get awardedOperator(): Bytes | null {
    let value = this.get("awardedOperator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set awardedOperator(value: Bytes | null) {
    if (value === null) {
      this.unset("awardedOperator");
    } else {
      this.set("awardedOperator", Value.fromBytes(value as Bytes));
    }
  }

  get prizePeriodStartedTimestamp(): BigInt | null {
    let value = this.get("prizePeriodStartedTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set prizePeriodStartedTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("prizePeriodStartedTimestamp");
    } else {
      this.set(
        "prizePeriodStartedTimestamp",
        Value.fromBigInt(value as BigInt)
      );
    }
  }

  get lockBlock(): BigInt | null {
    let value = this.get("lockBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lockBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("lockBlock");
    } else {
      this.set("lockBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get awardedBlock(): BigInt | null {
    let value = this.get("awardedBlock");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set awardedBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("awardedBlock");
    } else {
      this.set("awardedBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get awardedTimestamp(): BigInt | null {
    let value = this.get("awardedTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set awardedTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("awardedTimestamp");
    } else {
      this.set("awardedTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get rngRequestId(): BigInt | null {
    let value = this.get("rngRequestId");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rngRequestId(value: BigInt | null) {
    if (value === null) {
      this.unset("rngRequestId");
    } else {
      this.set("rngRequestId", Value.fromBigInt(value as BigInt));
    }
  }

  get randomNumber(): BigInt | null {
    let value = this.get("randomNumber");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set randomNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("randomNumber");
    } else {
      this.set("randomNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get totalTicketSupply(): BigInt | null {
    let value = this.get("totalTicketSupply");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalTicketSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalTicketSupply");
    } else {
      this.set("totalTicketSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get winners(): Array<Bytes> | null {
    let value = this.get("winners");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set winners(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("winners");
    } else {
      this.set("winners", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get awardedExternalErc20Tokens(): Array<string> {
    let value = this.get("awardedExternalErc20Tokens");
    return value.toStringArray();
  }

  set awardedExternalErc20Tokens(value: Array<string>) {
    this.set("awardedExternalErc20Tokens", Value.fromStringArray(value));
  }

  get awardedExternalErc721Nfts(): Array<string> {
    let value = this.get("awardedExternalErc721Nfts");
    return value.toStringArray();
  }

  set awardedExternalErc721Nfts(value: Array<string>) {
    this.set("awardedExternalErc721Nfts", Value.fromStringArray(value));
  }
}

export class AwardedExternalErc20Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AwardedExternalErc20Token entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AwardedExternalErc20Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AwardedExternalErc20Token", id.toString(), this);
  }

  static load(id: string): AwardedExternalErc20Token | null {
    return store.get(
      "AwardedExternalErc20Token",
      id
    ) as AwardedExternalErc20Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get balanceAwarded(): BigInt | null {
    let value = this.get("balanceAwarded");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balanceAwarded(value: BigInt | null) {
    if (value === null) {
      this.unset("balanceAwarded");
    } else {
      this.set("balanceAwarded", Value.fromBigInt(value as BigInt));
    }
  }

  get prize(): string {
    let value = this.get("prize");
    return value.toString();
  }

  set prize(value: string) {
    this.set("prize", Value.fromString(value));
  }
}

export class AwardedExternalErc721Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AwardedExternalErc721Nft entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AwardedExternalErc721Nft entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AwardedExternalErc721Nft", id.toString(), this);
  }

  static load(id: string): AwardedExternalErc721Nft | null {
    return store.get(
      "AwardedExternalErc721Nft",
      id
    ) as AwardedExternalErc721Nft | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get("tokenIds");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("tokenIds");
    } else {
      this.set("tokenIds", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get prize(): string | null {
    let value = this.get("prize");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prize(value: string | null) {
    if (value === null) {
      this.unset("prize");
    } else {
      this.set("prize", Value.fromString(value as string));
    }
  }
}

export class ControlledToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ControlledToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ControlledToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ControlledToken", id.toString(), this);
  }

  static load(id: string): ControlledToken | null {
    return store.get("ControlledToken", id) as ControlledToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class ExternalErc20Award extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExternalErc20Award entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExternalErc20Award entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExternalErc20Award", id.toString(), this);
  }

  static load(id: string): ExternalErc20Award | null {
    return store.get("ExternalErc20Award", id) as ExternalErc20Award | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get prizeStrategy(): string | null {
    let value = this.get("prizeStrategy");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prizeStrategy(value: string | null) {
    if (value === null) {
      this.unset("prizeStrategy");
    } else {
      this.set("prizeStrategy", Value.fromString(value as string));
    }
  }
}

export class ExternalErc721Award extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExternalErc721Award entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExternalErc721Award entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExternalErc721Award", id.toString(), this);
  }

  static load(id: string): ExternalErc721Award | null {
    return store.get("ExternalErc721Award", id) as ExternalErc721Award | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get("tokenIds");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("tokenIds");
    } else {
      this.set("tokenIds", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get prizeStrategy(): string | null {
    let value = this.get("prizeStrategy");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set prizeStrategy(value: string | null) {
    if (value === null) {
      this.unset("prizeStrategy");
    } else {
      this.set("prizeStrategy", Value.fromString(value as string));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get timelockedBalance(): BigInt {
    let value = this.get("timelockedBalance");
    return value.toBigInt();
  }

  set timelockedBalance(value: BigInt) {
    this.set("timelockedBalance", Value.fromBigInt(value));
  }

  get unlockTimestamp(): BigInt {
    let value = this.get("unlockTimestamp");
    return value.toBigInt();
  }

  set unlockTimestamp(value: BigInt) {
    this.set("unlockTimestamp", Value.fromBigInt(value));
  }

  get cumulativeWinnings(): BigInt {
    let value = this.get("cumulativeWinnings");
    return value.toBigInt();
  }

  set cumulativeWinnings(value: BigInt) {
    this.set("cumulativeWinnings", Value.fromBigInt(value));
  }
}

export class Sponsor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Sponsor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Sponsor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Sponsor", id.toString(), this);
  }

  static load(id: string): Sponsor | null {
    return store.get("Sponsor", id) as Sponsor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class CreditRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreditRate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreditRate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreditRate", id.toString(), this);
  }

  static load(id: string): CreditRate | null {
    return store.get("CreditRate", id) as CreditRate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get creditLimitMantissa(): BigInt {
    let value = this.get("creditLimitMantissa");
    return value.toBigInt();
  }

  set creditLimitMantissa(value: BigInt) {
    this.set("creditLimitMantissa", Value.fromBigInt(value));
  }

  get creditRateMantissa(): BigInt {
    let value = this.get("creditRateMantissa");
    return value.toBigInt();
  }

  set creditRateMantissa(value: BigInt) {
    this.set("creditRateMantissa", Value.fromBigInt(value));
  }
}

export class CreditBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreditBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreditBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreditBalance", id.toString(), this);
  }

  static load(id: string): CreditBalance | null {
    return store.get("CreditBalance", id) as CreditBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get prizePool(): string {
    let value = this.get("prizePool");
    return value.toString();
  }

  set prizePool(value: string) {
    this.set("prizePool", Value.fromString(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }
}

export class DripTokenPlayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DripTokenPlayer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DripTokenPlayer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DripTokenPlayer", id.toString(), this);
  }

  static load(id: string): DripTokenPlayer | null {
    return store.get("DripTokenPlayer", id) as DripTokenPlayer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get comptroller(): string {
    let value = this.get("comptroller");
    return value.toString();
  }

  set comptroller(value: string) {
    this.set("comptroller", Value.fromString(value));
  }

  get dripToken(): Bytes {
    let value = this.get("dripToken");
    return value.toBytes();
  }

  set dripToken(value: Bytes) {
    this.set("dripToken", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class BalanceDripPlayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BalanceDripPlayer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalanceDripPlayer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalanceDripPlayer", id.toString(), this);
  }

  static load(id: string): BalanceDripPlayer | null {
    return store.get("BalanceDripPlayer", id) as BalanceDripPlayer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balanceDrip(): string {
    let value = this.get("balanceDrip");
    return value.toString();
  }

  set balanceDrip(value: string) {
    this.set("balanceDrip", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }
}

export class BalanceDrip extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BalanceDrip entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BalanceDrip entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BalanceDrip", id.toString(), this);
  }

  static load(id: string): BalanceDrip | null {
    return store.get("BalanceDrip", id) as BalanceDrip | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get comptroller(): string {
    let value = this.get("comptroller");
    return value.toString();
  }

  set comptroller(value: string) {
    this.set("comptroller", Value.fromString(value));
  }

  get sourceAddress(): Bytes {
    let value = this.get("sourceAddress");
    return value.toBytes();
  }

  set sourceAddress(value: Bytes) {
    this.set("sourceAddress", Value.fromBytes(value));
  }

  get measureToken(): Bytes {
    let value = this.get("measureToken");
    return value.toBytes();
  }

  set measureToken(value: Bytes) {
    this.set("measureToken", Value.fromBytes(value));
  }

  get dripToken(): Bytes {
    let value = this.get("dripToken");
    return value.toBytes();
  }

  set dripToken(value: Bytes) {
    this.set("dripToken", Value.fromBytes(value));
  }

  get dripRatePerSecond(): BigInt | null {
    let value = this.get("dripRatePerSecond");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dripRatePerSecond(value: BigInt | null) {
    if (value === null) {
      this.unset("dripRatePerSecond");
    } else {
      this.set("dripRatePerSecond", Value.fromBigInt(value as BigInt));
    }
  }

  get exchangeRateMantissa(): BigInt | null {
    let value = this.get("exchangeRateMantissa");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set exchangeRateMantissa(value: BigInt | null) {
    if (value === null) {
      this.unset("exchangeRateMantissa");
    } else {
      this.set("exchangeRateMantissa", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get players(): Array<string> {
    let value = this.get("players");
    return value.toStringArray();
  }

  set players(value: Array<string>) {
    this.set("players", Value.fromStringArray(value));
  }

  get deactivated(): boolean {
    let value = this.get("deactivated");
    return value.toBoolean();
  }

  set deactivated(value: boolean) {
    this.set("deactivated", Value.fromBoolean(value));
  }
}

export class VolumeDripPlayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VolumeDripPlayer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VolumeDripPlayer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VolumeDripPlayer", id.toString(), this);
  }

  static load(id: string): VolumeDripPlayer | null {
    return store.get("VolumeDripPlayer", id) as VolumeDripPlayer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get volumeDrip(): string {
    let value = this.get("volumeDrip");
    return value.toString();
  }

  set volumeDrip(value: string) {
    this.set("volumeDrip", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get periodIndex(): BigInt {
    let value = this.get("periodIndex");
    return value.toBigInt();
  }

  set periodIndex(value: BigInt) {
    this.set("periodIndex", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class VolumeDripPeriod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VolumeDripPeriod entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VolumeDripPeriod entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VolumeDripPeriod", id.toString(), this);
  }

  static load(id: string): VolumeDripPeriod | null {
    return store.get("VolumeDripPeriod", id) as VolumeDripPeriod | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get volumeDrip(): string {
    let value = this.get("volumeDrip");
    return value.toString();
  }

  set volumeDrip(value: string) {
    this.set("volumeDrip", Value.fromString(value));
  }

  get periodIndex(): BigInt {
    let value = this.get("periodIndex");
    return value.toBigInt();
  }

  set periodIndex(value: BigInt) {
    this.set("periodIndex", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (value === null) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(value as BigInt));
    }
  }

  get dripAmount(): BigInt | null {
    let value = this.get("dripAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dripAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("dripAmount");
    } else {
      this.set("dripAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get endTime(): BigInt | null {
    let value = this.get("endTime");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt | null) {
    if (value === null) {
      this.unset("endTime");
    } else {
      this.set("endTime", Value.fromBigInt(value as BigInt));
    }
  }

  get isDripping(): boolean {
    let value = this.get("isDripping");
    return value.toBoolean();
  }

  set isDripping(value: boolean) {
    this.set("isDripping", Value.fromBoolean(value));
  }
}

export class VolumeDrip extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VolumeDrip entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VolumeDrip entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VolumeDrip", id.toString(), this);
  }

  static load(id: string): VolumeDrip | null {
    return store.get("VolumeDrip", id) as VolumeDrip | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get comptroller(): string {
    let value = this.get("comptroller");
    return value.toString();
  }

  set comptroller(value: string) {
    this.set("comptroller", Value.fromString(value));
  }

  get sourceAddress(): Bytes {
    let value = this.get("sourceAddress");
    return value.toBytes();
  }

  set sourceAddress(value: Bytes) {
    this.set("sourceAddress", Value.fromBytes(value));
  }

  get measureToken(): Bytes {
    let value = this.get("measureToken");
    return value.toBytes();
  }

  set measureToken(value: Bytes) {
    this.set("measureToken", Value.fromBytes(value));
  }

  get dripToken(): Bytes {
    let value = this.get("dripToken");
    return value.toBytes();
  }

  set dripToken(value: Bytes) {
    this.set("dripToken", Value.fromBytes(value));
  }

  get referral(): boolean {
    let value = this.get("referral");
    return value.toBoolean();
  }

  set referral(value: boolean) {
    this.set("referral", Value.fromBoolean(value));
  }

  get periodSeconds(): BigInt | null {
    let value = this.get("periodSeconds");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set periodSeconds(value: BigInt | null) {
    if (value === null) {
      this.unset("periodSeconds");
    } else {
      this.set("periodSeconds", Value.fromBigInt(value as BigInt));
    }
  }

  get dripAmount(): BigInt | null {
    let value = this.get("dripAmount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dripAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("dripAmount");
    } else {
      this.set("dripAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get periodCount(): BigInt | null {
    let value = this.get("periodCount");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set periodCount(value: BigInt | null) {
    if (value === null) {
      this.unset("periodCount");
    } else {
      this.set("periodCount", Value.fromBigInt(value as BigInt));
    }
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get periods(): Array<string> {
    let value = this.get("periods");
    return value.toStringArray();
  }

  set periods(value: Array<string>) {
    this.set("periods", Value.fromStringArray(value));
  }

  get deactivated(): boolean {
    let value = this.get("deactivated");
    return value.toBoolean();
  }

  set deactivated(value: boolean) {
    this.set("deactivated", Value.fromBoolean(value));
  }
}

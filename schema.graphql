enum PrizePoolState {
  Opened
  Started
  Awarded
}

enum ControlledTokenType {
  Ticket
  Sponsorship
}

enum PrizePoolType {
  Compound
  yVault
}

# ID: `${comptroller.address}`
type Comptroller @entity {
  id: ID!
  owner: Bytes!

  players: [DripTokenPlayer!]! @derivedFrom(field: "comptroller")
  balanceDrips: [BalanceDrip!]! @derivedFrom(field: "comptroller")
  volumeDrips: [VolumeDrip!]! @derivedFrom(field: "comptroller")
}

# ID: `${prizePool.address}`
type PrizePool @entity {
  id: ID!
  deactivated: Boolean!

  owner: Bytes
  reserveRegistry: Bytes
  trustedForwarder: Bytes

  prizeStrategy: PrizeStrategy
  prizePoolType: PrizePoolType
  compoundPrizePool: CompoundPrizePool

  reserveFeeControlledToken: Bytes!

  underlyingCollateralToken: Bytes!
  underlyingCollateralDecimals: BigInt!
  underlyingCollateralName: String!
  underlyingCollateralSymbol: String!

  maxExitFeeMantissa: BigInt!
  maxTimelockDuration: BigInt!
  timelockTotalSupply: BigInt!
  liquidityCap: BigInt!

  playerCount: BigInt!
  totalSupply: BigInt!
  totalSponsorship: BigInt!

  cumulativePrizeGross: BigInt!
  cumulativePrizeReserveFee: BigInt!
  cumulativePrizeNet: BigInt!

  currentPrizeId: BigInt!
  currentState: PrizePoolState!

  prizesCount: BigInt!
  prizes: [Prize!]! @derivedFrom(field: "prizePool")

  tokenCreditRates: [CreditRate!]! @derivedFrom(field: "prizePool")
  tokenCreditBalances: [CreditBalance!]! @derivedFrom(field: "prizePool")

  players: [Player!]! @derivedFrom(field: "prizePool")
  sponsors: [Sponsor!]! @derivedFrom(field: "prizePool")
}

# ID: `${compoundPrizePool.address}`
type CompoundPrizePool @entity {
  id: ID!

  cToken: Bytes
}

# ID: `${prizeStrategy.address}`
type PrizeStrategy @entity {
  id: ID!
  periodicPrizeStrategy: PeriodicPrizeStrategy
}


 # ID: `${??.address}`
type PeriodicPrizeStrategy @entity { 
  id: ID!
  owner: Bytes #what is this field
  
  numberOfWinners: BigInt
  
  tokenListener: Comptroller
  prizePool: PrizePool 
  rng: Bytes
  
  ticket: ControlledToken 
  sponsorship: ControlledToken
  
  prizePeriodSeconds: BigInt! 
  prizePeriodStartedAt: BigInt! 
  prizePeriodEndAt: BigInt! # remove can be calculated above fields?
  
  externalErc20Awards: [ExternalErc20Award!]! @derivedFrom(field: "prizeStrategy") 
  externalErc721Awards: [ExternalErc721Award!]! @derivedFrom(field: "prizeStrategy")
}

# ID: `${prizePool.address}-${prizeCount}`
# dynamically generated type, not mapped to a specific contract
type Prize @entity {
  id: ID!
  prizePool: PrizePool!

  awardStartOperator: Bytes
  awardedOperator: Bytes

  prizePeriodStartedTimestamp: BigInt
  lockBlock: BigInt

  awardedBlock: BigInt
  awardedTimestamp: BigInt

  rngRequestId: BigInt
  randomNumber: BigInt

  amount: BigInt

  totalTicketSupply: BigInt # cache of num tickets sold when this prize was awarded

  winners: [Bytes!]

  awardedExternalErc20Tokens: [AwardedExternalErc20Token!]! @derivedFrom(field: "prize")
  awardedExternalErc721Nfts: [AwardedExternalErc721Nft!]! @derivedFrom(field: "prize")
}

# ID: `${prize.id}-${token.address}`
# dynamically generated type, not mapped to a specific contract
type AwardedExternalErc20Token @entity {
  id: ID!

  address: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
  
  balanceAwarded: BigInt
  prize: Prize!
}

# ID: `${prize.id}-${token.address}`
# dynamically generated type, not mapped to a specific contract
type AwardedExternalErc721Nft @entity {
  id: ID!

  address: Bytes!
  tokenIds: [BigInt!]
  prize: Prize
}



# ID: `${controlledToken.address}`
type ControlledToken @entity {
  id: ID!
  prizePool: PrizePool!

  type: ControlledTokenType!
  name: String!
  symbol: String!
  decimals: BigInt!

  totalSupply: BigInt!
}

# ID: `${prizeStrategy.address}-${token.address}`
# dynamically generated type, not mapped to a specific contract
type ExternalErc20Award @entity {
  id: ID!

  address: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
  
  balanceAwarded: BigInt
  prizeStrategy: PeriodicPrizeStrategy
}

# ID: `${prizeStrategy.address}-${token.address}`
# dynamically generated type, not mapped to a specific contract
type ExternalErc721Award @entity {
  id: ID!
  address: Bytes!
  tokenIds: [BigInt!]
  prizeStrategy: PeriodicPrizeStrategy
}

# ID: `${prizePool.address}-${player.address}`
# dynamically generated type, not mapped to a specific contract
type Player @entity {
  id: ID!
  prizePool: PrizePool!
  address: Bytes!

  balance: BigInt!
  timelockedBalance: BigInt!
  unlockTimestamp: BigInt!
  cumulativeWinnings: BigInt!
}

# ID: `${prizePool.address}-${sponsor.address}`
# dynamically generated type, not mapped to a specific contract
type Sponsor @entity {
  id: ID!
  prizePool: PrizePool!

  address: Bytes!
  balance: BigInt!
}


# ID: `${prizePool.address}-${controlledToken.address}`
# dynamically generated type, not mapped to a specific contract
type CreditRate @entity {
  id: ID!
  prizePool: PrizePool!

  creditLimitMantissa: BigInt!
  creditRateMantissa: BigInt!
}

# ID: `${prizePool.address}-${controlledToken.address}`
# dynamically generated type, not mapped to a specific contract
type CreditBalance @entity {
  id: ID!
  prizePool: PrizePool!

  balance: BigInt
  timestamp: BigInt
  initialized: Boolean
}

# ID: `${comptroller.address}-${dripToken.address}-${player.address}`
# dynamically generated type, not mapped to a specific contract
type DripTokenPlayer @entity {
  id: ID!
  comptroller: Comptroller!
  dripToken: Bytes!
  address: Bytes!

  # claimable balance
  # balance: BigInt!
}

# ID: `${balanceDripId}-${player.address}`
# dynamically generated type, not mapped to a specific contract
type BalanceDripPlayer @entity {
  id: ID!
  balanceDrip: BalanceDrip!
  address: Bytes!
}

# ID: `${comptroller.address}-${sourceToken.address}-${measureToken.address}-${dripToken.address}`
# dynamically generated type, not mapped to a specific contract
type BalanceDrip @entity {
  id: ID!

  comptroller: Comptroller!

  sourceAddress: Bytes!
  measureToken: Bytes!
  dripToken: Bytes!

  dripRatePerSecond: BigInt
  exchangeRateMantissa: BigInt
  timestamp: BigInt

  players: [BalanceDripPlayer!]! @derivedFrom(field: "balanceDrip")

  deactivated: Boolean!
}


# ID: `${volumeDripId}-${player.address}`
# dynamically generated type, not mapped to a specific contract
type VolumeDripPlayer @entity {
  id: ID!
  volumeDrip: VolumeDrip!
  address: Bytes!

  periodIndex: BigInt!
  balance: BigInt!
}

# ID: `${volumeDripId}-${periodIndex}`
# dynamically generated type, not mapped to a specific contract
type VolumeDripPeriod @entity {
  id: ID!
  volumeDrip: VolumeDrip!
  periodIndex: BigInt!

  totalSupply: BigInt
  dripAmount: BigInt
  endTime: BigInt

  isDripping: Boolean!
}

# ID: `${comptroller.address}-${sourceToken.address}-${measureToken.address}-${dripToken.address}-${isReferral}`
# dynamically generated type, not mapped to a specific contract
type VolumeDrip @entity {
  id: ID!

  comptroller: Comptroller!

  sourceAddress: Bytes!
  measureToken: Bytes!
  dripToken: Bytes!
  referral: Boolean!

  periodSeconds: BigInt
  dripAmount: BigInt
  periodCount: BigInt

  deposits: [VolumeDripPlayer!]! @derivedFrom(field: "volumeDrip")
  periods: [VolumeDripPeriod!]! @derivedFrom(field: "volumeDrip")

  deactivated: Boolean!
}
